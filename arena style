<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Nordic Arena ‚Äî Elder-Style HTML5 Canvas</title>
  <style>
    :root{ --ui-bg:#0b0c10cc; --ui-panel:#0e1116cc; --ui-accent:#9dd1ff; --health:#b91c1c; --magicka:#3b82f6; --stamina:#16a34a; --septim:#f5d742; --text:#e5e7eb; }
    *{box-sizing:border-box}
    html,body{height:100%;margin:0;background:#0a0c11;color:var(--text);font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif}
    #gameWrap{position:fixed;inset:0;overflow:hidden}
    canvas{position:absolute;inset:0;width:100%;height:100%;display:block;image-rendering:crisp-edges;image-rendering:pixelated}

    /* HUD */
    .hud{position:fixed;left:0;right:0;top:0;display:flex;gap:.75rem;align-items:center;padding:.5rem 1rem;background:linear-gradient(180deg,var(--ui-bg),transparent);z-index:4}
    .hud .panel{background:var(--ui-panel);backdrop-filter: blur(6px);border:1px solid #29303d;border-radius:14px;padding:.45rem .7rem;display:flex;gap:.5rem;align-items:center;box-shadow:0 4px 16px #0007}
    .bar{position:relative;width:210px;height:14px;background:#0c1016;border:1px solid #2a3140;border-radius:999px;overflow:hidden}
    .bar>span{position:absolute;left:0;top:0;bottom:0;width:50%;background:var(--ui-accent)}
    .bar small{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;font-size:.72rem;color:#cbd5e1;text-shadow:0 1px 0 #000}
    .chip{font-weight:600;font-size:.9rem}
    .chip b{color:var(--septim)}

    /* Compass */
    .compass{position:fixed;left:50%;transform:translateX(-50%);top:40px;background:#0f131bcc;border:1px solid #29303d;border-radius:999px;padding:4px 12px;display:flex;gap:10px;align-items:center;z-index:4}
    .compass .tick{width:2px;height:12px;background:#9aa5b1;border-radius:2px}
    .compass .label{font-weight:700;letter-spacing:1px}

    .corner{position:fixed;bottom:0;left:0;right:0;display:flex;justify-content:space-between;padding:1rem;z-index:4}
    .help{background:var(--ui-panel);padding:.6rem .9rem;border-radius:12px;border:1px solid #2a2f3a;max-width:580px;box-shadow:0 4px 16px #0007}
    .btn{cursor:pointer;background:#121a24;color:#e2e8f0;border:1px solid #324155;border-radius:12px;padding:.5rem .8rem;font-weight:600;transition:transform .06s ease,opacity .2s}
    .btn:hover{transform:translateY(-1px)}
    .toast{position:fixed;right:12px;bottom:12px;background:#0b0c10cc;border:1px solid #2a2f3a;color:#e5e7eb;padding:8px 10px;border-radius:10px;z-index:5}
    .error{position:fixed;left:50%;bottom:12px;transform:translateX(-50%);padding:8px 12px;background:#7f1d1d;border:1px solid #fecaca;color:#fff;text-align:center;border-radius:10px;z-index:6;max-width:92vw}
    .topRight{position:fixed;right:10px;top:10px;display:flex;gap:8px;z-index:4}
  </style>
<!-- iOS fullscreen-ish -->
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
<style>
  html,body{ overscroll-behavior:none; -webkit-user-select:none; user-select:none; }
  canvas{ touch-action:none; -webkit-touch-callout:none; -webkit-tap-highlight-color:transparent; }
  .mobile{ position:fixed; inset:0; pointer-events:none; z-index:10 }
  .stickWrap{ position:absolute; left:16px; bottom:16px; width:160px; height:160px; border-radius:999px;
    background:rgba(15,19,27,0.25); border:1px solid #29303d; pointer-events:auto; }
  .stick{ position:absolute; left:50%; top:50%; width:74px; height:74px; margin:-37px 0 0 -37px; border-radius:999px;
    background:rgba(157,209,255,0.35); border:1px solid #3b82f680; transform:translate(0,0) }
  .btnA,.btnB{ position:absolute; right:16px; width:86px; height:86px; border-radius:18px; pointer-events:auto;
    background:#121a24e6; border:1px solid #324155; color:#e2e8f0; font-weight:800; font-size:18px;
    display:flex; align-items:center; justify-content:center; box-shadow:0 6px 18px #0007; }
  .btnA{ bottom:16px }
  .btnB{ bottom:116px }
  .aimPad{ position:absolute; right:0; top:0; bottom:0; left:45%; pointer-events:auto; }
</style>
</head>
<body>
  <div id="gameWrap"><canvas id="game"></canvas>
<!-- Mobile overlay controls -->
<div class="mobile" id="mobile" style="display:none">
  <div class="stickWrap" id="stickWrap"><div class="stick" id="stick"></div></div>
  <div class="btnB" id="btnMelee">‚öîÔ∏è</div>
  <div class="btnA" id="btnFire">üî•</div>
  <div class="aimPad" id="aimPad" aria-hidden="true"></div>
</div>

</div>

  <!-- Compass like Skyrim -->
  <div class="compass" id="compass">
    <span class="label">N</span><span class="tick"></span><span class="label">E</span><span class="tick"></span><span class="label">S</span><span class="tick"></span><span class="label">W</span>
  </div>

  <div class="hud">
    <div class="panel">
      <div class="bar" title="Health"><span id="hpFill" style="background:var(--health);width:100%"></span><small id="hpTxt">Health 120/120</small></div>
      <div class="bar" title="Magicka"><span id="mpFill" style="background:var(--magicka);width:100%"></span><small id="mpTxt">Magicka 90/90</small></div>
      <div class="bar" title="Stamina"><span id="spFill" style="background:var(--stamina);width:100%"></span><small id="spTxt">Stamina 110/110</small></div>
    </div>
    <div class="panel chip">Wave <b id="wave">1</b> ‚Ä¢ XP <b id="xp">0</b> ‚Ä¢ Septims <b id="gold">0</b></div>
  </div>

  <div class="topRight">
    <button class="btn" id="themeBtn">üå®Ô∏è Tundra</button>
    <button class="btn" id="restartBtn" aria-label="Restart (R)">üîÅ Restart</button>
  </div>

  <div class="corner">
    <div class="help"><b>Controls</b>: WASD/Arrows move ‚Ä¢ Mouse aim ‚Ä¢ Click Firebolt ‚Ä¢ Space melee ‚Ä¢ Shift sprint ‚Ä¢ F shout ‚Ä¢ B shop ‚Ä¢ R restart</div>
    <div class="help muted">Fan-made, Elder-style vibes. No external assets.</div>
  </div>

<script>
'use strict';
(() => {
  // Show errors on screen to help debugging
  addEventListener('error', (e)=>{ const d=document.createElement('div'); d.className='error'; d.textContent='Error: '+(e.message||'unknown'); document.body.appendChild(d); });

  // ====== Canvas & DPR ======
  const canvas = document.getElementById('game');
  const ctx = canvas.getContext('2d');
  if(!ctx){ const err=document.createElement('div'); err.className='error'; err.textContent='Canvas 2D not supported.'; document.body.appendChild(err); return; }

  // IMPORTANT: declare mouse BEFORE resize() so we can set it there
  let mouse = {x:0,y:0,down:false};

  function resize(){
    const dpr = Math.max(1, Math.min(2, devicePixelRatio || 1));
    const w = innerWidth, h = innerHeight;
    canvas.style.width = w + 'px';
    canvas.style.height = h + 'px';
    canvas.width  = Math.floor(w * dpr);
    canvas.height = Math.floor(h * dpr);
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
    mouse.x = w/2; mouse.y = h/2;
  }
  addEventListener('resize', resize); resize();

  // ====== Input ======
  const keys=new Set(); const justPressed=new Set();
  addEventListener('keydown', e=>{ if(e.repeat) return; const k=(e.key||'').toLowerCase(); keys.add(k); justPressed.add(k); });
  addEventListener('keyup', e=>{ keys.delete((e.key||'').toLowerCase()); });
  canvas.addEventListener('pointermove', e=>{ const r=canvas.getBoundingClientRect(); mouse.x=e.clientX-r.left; mouse.y=e.clientY-r.top; });
  canvas.addEventListener('pointerdown', ()=>{ mouse.down=true; });
  addEventListener('pointerup', ()=>{ mouse.down=false; });
  function wasPressed(...alts){ for(const a of alts){ if(justPressed.has(a)){ justPressed.delete(a); return true; } } return false; }

  // ====== Helpers ======
  const clamp=(v,min,max)=>Math.max(min,Math.min(max,v));
  const lerp=(a,b,t)=>a+(b-a)*t;
  const rand=(a,b)=>Math.random()*(b-a)+a;
  const dist2=(ax,ay,bx,by)=>{const dx=ax-bx, dy=ay-by; return dx*dx+dy*dy};

  // ====== Theme (Tomb vs Tundra) ======
  const Theme={TUNDRA:'tundra', TOMB:'tomb'}; let theme=Theme.TUNDRA;
  document.getElementById('themeBtn').onclick=()=>{ theme = (theme===Theme.TUNDRA?Theme.TOMB:Theme.TUNDRA); document.getElementById('themeBtn').textContent = theme===Theme.TUNDRA?'üå®Ô∏è Tundra':'üóùÔ∏è Nordic Tomb'; };

  // ====== Persistent Meta ======
  const META_KEY='nordic_arena_meta_v1';
  const META={maxHealth:120,maxMagicka:90,maxStamina:110,power:12,spellPower:15,move:120,shoutUnlocked:true};
  try{ const raw=localStorage.getItem(META_KEY); if(raw) Object.assign(META, JSON.parse(raw)); }catch{}
  const saveMeta=()=>{ try{ localStorage.setItem(META_KEY, JSON.stringify(META)); }catch{} };

  // ====== Particles ======
  class Particle{ constructor(x,y,vx,vy,life,sz,draw){ this.x=x; this.y=y; this.vx=vx; this.vy=vy; this.life=life; this.sz=sz; this.drawFn=draw; this.dead=false; }
    update(dt){ this.x+=this.vx*dt; this.y+=this.vy*dt; this.life-=dt; if(this.life<=0) this.dead=true; }
    draw(ctx){ this.drawFn(ctx,this); }
  }
  const particles=[]; const addParticle=(p)=>particles.push(p);
  function ember(x,y){ addParticle(new Particle(x,y,rand(-20,20),rand(-10,-30),rand(.4,.8),rand(2,4),(c,p)=>{ c.save(); c.translate(p.x,p.y); c.globalAlpha = Math.max(0,p.life); c.fillStyle='#f59e0b'; c.beginPath(); c.arc(0,0,p.sz,0,Math.PI*2); c.fill(); c.restore(); })); }
  function snowflake(){ const x=rand(0,canvas.clientWidth), y=rand(-40,-10); addParticle(new Particle(x,y,rand(-10,10),rand(20,40),rand(3,6),rand(1,2),(c,p)=>{ c.save(); c.translate(p.x,p.y); c.globalAlpha=0.8; c.fillStyle='#e5eef7'; c.fillRect(-p.sz/2,-p.sz/2,p.sz,p.sz); c.restore(); })); }

  // ====== Entities ======
  class Entity{ constructor(x,y){ this.x=x; this.y=y; this.vx=0; this.vy=0; this.r=12; this.dead=false; } update(dt){} draw(ctx){} }

  class Player extends Entity{
    constructor(x,y){
      super(x,y);
      this.r=13;
      this.hp=META.maxHealth; this.hpMax=META.maxHealth;
      this.mp=META.maxMagicka; this.mpMax=META.maxMagicka;
      this.sp=META.maxStamina; this.spMax=META.maxStamina;
      this.speed=META.move;
      this.angle=0; this.swingCD=0; this.castCD=0; this.ifr=0; this.shoutCD=0; this.outOfCombat=0;
    }
    update(dt){
      const up=keys.has('w')||keys.has('arrowup'); const dn=keys.has('s')||keys.has('arrowdown');
      const lf=keys.has('a')||keys.has('arrowleft'); const rt=keys.has('d')||keys.has('arrowright');
      let ax=0,ay=0; if(up) ay-=1; if(dn) ay+=1; if(lf) ax-=1; if(rt) ax+=1; const len=Math.hypot(ax,ay)||1; ax/=len; ay/=len;
      const sprint=keys.has('shift'); const speed=sprint&&this.sp>5?this.speed*1.5:this.speed;
      if(sprint&&(ax||ay)) this.sp=Math.max(0,this.sp-25*dt); else this.sp=Math.min(this.spMax,this.sp+18*dt);
      this.vx=ax*speed; this.vy=ay*speed; this.x+=this.vx*dt; this.y+=this.vy*dt;
      const w=canvas.clientWidth,h=canvas.clientHeight; this.x=clamp(this.x,40,w-40); this.y=clamp(this.y,60,h-60);
      this.angle=Math.atan2(mouse.y-this.y, mouse.x-this.x);
      this.swingCD=Math.max(0,this.swingCD-dt); this.castCD=Math.max(0,this.castCD-dt); this.ifr=Math.max(0,this.ifr-dt); this.shoutCD=Math.max(0,this.shoutCD-dt);
      // Magicka regen
      const mpRate = this.outOfCombat>2 ? 18 : 8; this.mp=Math.min(this.mpMax, this.mp + mpRate*dt);
      // Actions
      if(wasPressed(' ','space','spacebar','Space','Spacebar') && this.swingCD<=0){ this.swingCD=0.35; swings.push(new Swing(this.x,this.y,this.angle,META.power)); this.outOfCombat=0; swordWhoosh(); }
      if(mouse.down && this.castCD<=0 && this.mp>=6){ this.castCD=0.16; this.mp-=6; const pr = new Projectile(this.x,this.y,this.angle,480,META.spellPower); projectiles.push(pr); for(let i=0;i<4;i++) ember(this.x+Math.cos(this.angle)*10, this.y+Math.sin(this.angle)*10); this.outOfCombat=0; }
      if(wasPressed('f','F') && META.shoutUnlocked && this.shoutCD<=0 && this.sp>=25){ this.sp-=25; this.shoutCD=6; shout(this.x,this.y,this.angle); this.outOfCombat=0; }
      this.outOfCombat += dt;
    }
    hurt(d){ if(this.ifr>0) return; this.hp-=d; this.outOfCombat=0; this.ifr=0.2; hitFlash(); if(this.hp<=0){ this.hp=0; death(); } }
    draw(ctx){ ctx.save(); ctx.translate(this.x,this.y); ctx.rotate(this.angle);
      // Stylized Dragonborn sprite (shapes & gradients)
      const g=ctx.createLinearGradient(-10,-10,12,12); g.addColorStop(0,'#7c7f83'); g.addColorStop(1,'#c7cacc'); ctx.fillStyle=g; ctx.beginPath(); ctx.arc(0,0,this.r,0,Math.PI*2); ctx.fill(); // cuirass
      ctx.strokeStyle='#d6d3d1'; ctx.lineWidth=4; ctx.beginPath(); ctx.moveTo(6,0); ctx.lineTo(22,0); ctx.stroke(); // steel sword
      ctx.restore(); }
  }

  class Enemy extends Entity{
    constructor(x,y,tier){ super(x,y); this.r=12+tier*2; this.tier=tier; this.hp=30+tier*30+GAME.wave*8; this.speed=70+tier*22+GAME.wave*4; this.dps=10+tier*6+Math.floor(GAME.wave*0.8); this.hitTick=0; }
    update(dt){
      const dx=player.x-this.x, dy=player.y-this.y; const d=Math.hypot(dx,dy)||1;
      const sp=Math.min(360,Math.max(40,this.speed)); this.x+=(dx/d)*sp*dt; this.y+=(dy/d)*sp*dt;
      // separation
      for(const e of enemies){ if(e===this) continue; const d2=dist2(this.x,this.y,e.x,e.y); const rr=(this.r+e.r); if(d2<rr*rr){ const dd=Math.sqrt(d2)||1; const nx=(this.x-e.x)/dd, ny=(this.y-e.y)/dd; const push=(rr-dd)*0.5; this.x+=nx*push; this.y+=ny*push; } }
      // contact damage
      const rr=(this.r+player.r); if(dist2(this.x,this.y,player.x,player.y)<rr*rr){ this.hitTick+=dt; if(this.hitTick>=0.2){ player.hurt(this.dps*0.2); this.hitTick=0; } }
    }
    draw(ctx){ ctx.save(); ctx.translate(this.x,this.y);
      const cols=['#8cab7a','#d2a65c','#7fb1d6']; ctx.fillStyle=cols[this.tier]||'#9ca3af'; ctx.beginPath(); ctx.arc(0,0,this.r,0,Math.PI*2); ctx.fill();
      ctx.restore(); }
  }

  class Projectile extends Entity{
    constructor(x,y,a,speed,power){ super(x,y); this.r=5; this.life=1.4; this.vx=Math.cos(a)*speed; this.vy=Math.sin(a)*speed; this.power=power; }
    update(dt){ this.x+=this.vx*dt; this.y+=this.vy*dt; this.life-=dt; if(this.life<=0) this.dead=true; if(Math.random()<0.5) ember(this.x,this.y); }
    draw(ctx){ ctx.save(); ctx.translate(this.x,this.y);
      const g=ctx.createRadialGradient(0,0,1,0,0,this.r*2.2); g.addColorStop(0,'#fff7ed'); g.addColorStop(0.5,'#fb923c'); g.addColorStop(1,'#9a3412'); ctx.fillStyle=g;
      ctx.beginPath(); ctx.arc(0,0,this.r*2.2,0,Math.PI*2); ctx.fill(); ctx.restore(); }
  }

  class Swing extends Entity{
    constructor(x,y,a,p){ super(x,y); this.angle=a; this.time=0.18; this.power=p; this.r=26; }
    update(dt){ this.time-=dt; if(this.time<=0) this.dead=true; this.x=player.x+Math.cos(this.angle)*20; this.y=player.y+Math.sin(this.angle)*20; }
    draw(ctx){ ctx.save(); ctx.translate(this.x,this.y); ctx.globalAlpha=0.7; ctx.fillStyle='#ef4444aa'; ctx.beginPath(); ctx.arc(0,0,this.r,0,Math.PI*2); ctx.fill(); ctx.restore(); }
  }

  class Pickup extends Entity{
    constructor(x,y,t,amt){ super(x,y); this.type=t; this.amount=amt; this.r=10; this.bob=0; }
    update(dt){ this.bob+=dt*4; }
    draw(ctx){ ctx.save(); ctx.translate(this.x,this.y-Math.sin(this.bob)*3);
      if(this.type==='gold'){ const g=ctx.createRadialGradient(0,0,2,0,0,this.r); g.addColorStop(0,'#fff2b3'); g.addColorStop(1,'#b18700'); ctx.fillStyle=g; }
      else if(this.type==='mp') { ctx.fillStyle='#60a5fa'; } else { ctx.fillStyle='#22c55e'; }
      ctx.beginPath(); ctx.arc(0,0,this.r,0,Math.PI*2); ctx.fill(); ctx.restore(); }
  }

  // ====== World & Systems ======
  const enemies=[]; const projectiles=[]; const swings=[]; const pickups=[]; const mountains=[]; // background
  let player; let waveTimer=0; const GAME={wave:1,xp:0,gold:0,time:0};

  // Parallax mountain silhouette
  function initMountains(){ mountains.length=0; const h=canvas.clientHeight; for(let i=0;i<4;i++){ const y=h- (i*50+120); const points=[]; let x=-60; while(x<canvas.clientWidth+120){ const peakY=y-rand(30,90); points.push([x,peakY]); x+=rand(80,160); } mountains.push({y,points,depth:i}); } }
  initMountains(); addEventListener('resize', initMountains);

  function spawnWave(n){
    for(let i=0;i<n;i++){
      const side=Math.floor(rand(0,4)); const m=20; let x,y;
      if(side===0){x=-m;y=rand(0,canvas.clientHeight);} else if(side===1){x=canvas.clientWidth+m;y=rand(0,canvas.clientHeight);}
      else if(side===2){x=rand(0,canvas.clientWidth);y=-m;} else {x=rand(0,canvas.clientWidth);y=canvas.clientHeight+m;}
      const tier=Math.random()<0.75?0:(Math.random()<0.8?1:2);
      enemies.push(new Enemy(x,y,tier));
    }
  }

  function updateWorld(dt){
    GAME.time+=dt; waveTimer-=dt;
    if(waveTimer<=0){ spawnWave(3+GAME.wave*2); waveTimer=Math.max(3.5,10-GAME.wave*0.6); GAME.wave++; waveEl.textContent=GAME.wave; }
    player.update(dt);
    for(const p of projectiles){ p.update(dt);} for(const s of swings){ s.update(dt);} for(const e of enemies){ e.update(dt);} for(const pk of pickups){ pk.update(dt);}
    // Theme ambient particles
    if(theme===Theme.TUNDRA && Math.random()<0.6) snowflake();
    for(const pt of particles){ pt.update(dt); }
    // collisions
    for(const p of projectiles){ if(p.dead) continue; for(const e of enemies){ if(e.dead) continue; if(dist2(p.x,p.y,e.x,e.y)<(p.r+e.r)*(p.r+e.r)){ e.hp-=p.power; p.dead=true; if(e.hp<=0) killEnemy(e); break; } } }
    for(const s of swings){ if(s.dead) continue; for(const e of enemies){ if(e.dead) continue; if(dist2(s.x,s.y,e.x,e.y)<(s.r+e.r)*(s.r+e.r)){ e.hp-=s.power; if(e.hp<=0) killEnemy(e); } } }
    for(const pk of pickups){ if(pk.dead) continue; if(dist2(pk.x,pk.y,player.x,player.y)<(pk.r+player.r)*(pk.r+player.r)){ if(pk.type==='gold'){ GAME.gold+=pk.amount; goldEl.textContent=GAME.gold; } if(pk.type==='mp'){ player.mp=Math.min(player.mpMax, player.mp+pk.amount);} if(pk.type==='sp'){ player.sp=Math.min(player.spMax, player.sp+pk.amount);} pk.dead=true; } }
    prune(projectiles); prune(swings); prune(enemies); prune(pickups); prune(particles);
  }
  function prune(list){ for(let i=list.length-1;i>=0;i--){ if(list[i].dead) list.splice(i,1);} }
  function killEnemy(e){ e.dead=true; GAME.xp += 6 + e.tier*6; xpEl.textContent = GAME.xp; if(Math.random()<.65) pickups.push(new Pickup(e.x,e.y,'gold', Math.floor(rand(6,14)))); if(Math.random()<.33) pickups.push(new Pickup(e.x,e.y,'mp', Math.floor(rand(10,18)))); if(Math.random()<.22) pickups.push(new Pickup(e.x,e.y,'sp', Math.floor(rand(8,14)))); }

  // ====== Render ======
  function drawMountains(){ if(theme!==Theme.TUNDRA) return; const w=canvas.clientWidth,h=canvas.clientHeight; ctx.save(); for(const m of mountains){ const y=m.y; ctx.beginPath(); ctx.moveTo(-120,h); for(const [x,py] of m.points){ ctx.lineTo(x,py);} ctx.lineTo(w+120,h); ctx.closePath(); const depth=m.depth; const c=['#0c1016','#101722','#142033','#1a2946'][depth]||'#0c1016'; ctx.fillStyle=c; ctx.fill(); } ctx.restore(); }
  function drawFloor(){ if(theme===Theme.TOMB){ // Nordic stone tiles
      ctx.fillStyle='#111418'; ctx.fillRect(0,0,canvas.clientWidth, canvas.clientHeight);
      ctx.strokeStyle='#1c2330'; ctx.lineWidth=1; ctx.beginPath(); const grid=56; for(let x=0;x<canvas.clientWidth;x+=grid){ ctx.moveTo(x,0); ctx.lineTo(x,canvas.clientHeight);} for(let y=28;y<canvas.clientHeight;y+=grid){ ctx.moveTo(0,y); ctx.lineTo(canvas.clientWidth,y);} ctx.stroke();
    } else { // tundra gradient
      const g=ctx.createLinearGradient(0,0,0,canvas.clientHeight); g.addColorStop(0,'#0a0c11'); g.addColorStop(1,'#0f1724'); ctx.fillStyle=g; ctx.fillRect(0,0,canvas.clientWidth, canvas.clientHeight); drawMountains(); }
  }

  let vignette=0; function hitFlash(){ vignette=0.6; }
  function render(){
    drawFloor();
    for(const pk of pickups){ pk.draw(ctx);} for(const e of enemies){ e.draw(ctx);} for(const s of swings){ s.draw(ctx);} for(const p of projectiles){ p.draw(ctx);} player.draw(ctx);
    for(const pt of particles){ pt.draw(ctx); }
    vignette = Math.max(0, vignette - 0.02);
    if(vignette>0){ ctx.fillStyle=`rgba(120,0,0,${vignette*0.35})`; ctx.fillRect(0,0,canvas.clientWidth, canvas.clientHeight); }
    if(player.hp/player.hpMax<0.33){ const a = lerp(0, 0.35, 1 - player.hp/player.hpMax); ctx.fillStyle=`rgba(0,0,0,${a})`; ctx.fillRect(0,0,canvas.clientWidth, canvas.clientHeight); }
  }

  // ====== HUD, Shop, Shout, Audio-ish ======
  const hpFill=document.getElementById('hpFill'); const mpFill=document.getElementById('mpFill'); const spFill=document.getElementById('spFill');
  const hpTxt=document.getElementById('hpTxt'); const mpTxt=document.getElementById('mpTxt'); const spTxt=document.getElementById('spTxt');
  const waveEl=document.getElementById('wave'); const xpEl=document.getElementById('xp'); const goldEl=document.getElementById('gold');
  function updateHUD(){ const hpP=player.hp/player.hpMax, mpP=player.mp/player.mpMax, spP=player.sp/player.spMax; hpFill.style.width=Math.max(0,hpP*100)+'%'; mpFill.style.width=Math.max(0,mpP*100)+'%'; spFill.style.width=Math.max(0,spP*100)+'%'; hpTxt.textContent=`Health ${Math.ceil(player.hp)}/${player.hpMax}`; mpTxt.textContent=`Magicka ${Math.ceil(player.mp)}/${player.mpMax}`; spTxt.textContent=`Stamina ${Math.ceil(player.sp)}/${player.spMax}`; }

  function toast(msg){ const t=document.createElement('div'); t.className='toast'; t.textContent=msg; document.body.appendChild(t); setTimeout(()=>t.remove(), 1800); }
  function openShop(){ const d=document.createElement('div'); d.className='toast'; d.style.maxWidth='480px'; d.innerHTML=`<b>Blacksmith & Mages Guild</b><br/>Septims: <span id="sept">${GAME.gold}</span><br/>
    <button class='btn' id='b1'>+10 Health (30)</button>
    <button class='btn' id='b2'>+8 Magicka (30)</button>
    <button class='btn' id='b3'>+10 Stamina (25)</button>
    <button class='btn' id='b4'>+3 Steel (melee) (40)</button>
    <button class='btn' id='b5'>+3 Destruction (spell) (40)</button>
    <button class='btn' id='b6'>Unlock Thu'um (120)</button>
    <div style='font-size:.8rem;margin-top:6px'>Press B anytime to open this again.</div>`;
    document.body.appendChild(d);
    const buy=(cost,fn)=>{ if(GAME.gold>=cost){ GAME.gold-=cost; goldEl.textContent=GAME.gold; fn(); saveMeta(); d.querySelector('#sept').textContent=GAME.gold; toast('Purchased!'); player.hpMax=META.maxHealth; player.mpMax=META.maxMagicka; player.spMax=META.maxStamina; player.speed=META.move; } else toast('Not enough Septims'); };
    d.querySelector('#b1').onclick=()=>buy(30,()=>META.maxHealth+=10);
    d.querySelector('#b2').onclick=()=>buy(30,()=>META.maxMagicka+=8);
    d.querySelector('#b3').onclick=()=>buy(25,()=>META.maxStamina+=10);
    d.querySelector('#b4').onclick=()=>buy(40,()=>META.power+=3);
    d.querySelector('#b5').onclick=()=>buy(40,()=>META.spellPower+=3);
    d.querySelector('#b6').onclick=()=>buy(120,()=>META.shoutUnlocked=true);
    setTimeout(()=>d.remove(), 8000);
  }

  function shout(x,y,ang){ const cos=Math.cos(ang), sin=Math.sin(ang); for(let k=0;k<16;k++){ ember(x+Math.cos(ang)*10, y+Math.sin(ang)*10); } for(const e of enemies){ const dx=e.x-x, dy=e.y-y; const dist=Math.hypot(dx,dy); if(dist>220) continue; const dot=(dx/dist)*cos + (dy/dist)*sin; if(dot>0.7){ e.hp -= 24 + META.spellPower*0.8; e.x += (dx/dist)*28; e.y += (dy/dist)*28; if(e.hp<=0) killEnemy(e); } } toast('FUS!'); }
  function swordWhoosh(){ try{ const ac=new (window.AudioContext||window.webkitAudioContext)(); const o=ac.createOscillator(); const g=ac.createGain(); o.type='sawtooth'; o.frequency.setValueAtTime(400,ac.currentTime); o.frequency.exponentialRampToValueAtTime(120,ac.currentTime+0.15); g.gain.setValueAtTime(0.03,ac.currentTime); g.gain.exponentialRampToValueAtTime(0.0001,ac.currentTime+0.15); o.connect(g).connect(ac.destination); o.start(); o.stop(ac.currentTime+0.16); }catch{} }
  function death(){ toast('You have fallen. Mara guide your soul.'); openShop(); startRun(); }
  document.getElementById('restartBtn').onclick=()=>startRun();
  addEventListener('keydown', (e)=>{ const k=(e.key||'').toLowerCase(); if(k==='r') startRun(); if(k==='b') openShop(); });

  // ====== Loop ======
  function startRun(){ enemies.length=0; projectiles.length=0; swings.length=0; pickups.length=0; particles.length=0; player=new Player(canvas.clientWidth/2, canvas.clientHeight/2); GAME.time=0; GAME.wave=1; waveEl.textContent=1; GAME.xp=0; xpEl.textContent=0; goldEl.textContent=GAME.gold; waveTimer=1.2; }
  const FIXED_DT=1/60; let acc=0; let last=performance.now();
  function loop(now){ const dt=Math.min(0.25,(now-last)/1000); last=now; acc+=dt; while(acc>=FIXED_DT){ updateWorld(FIXED_DT); updateHUD(); acc-=FIXED_DT; } render(); justPressed.clear(); requestAnimationFrame(loop); }

  startRun(); requestAnimationFrame(loop);
})();

// ---- Cinematic Polish Pack (IIFE-safe) ------------------------------------
(() => {
  // try to grab locals (since we are inside the same IIFE)
  const has = (k) => typeof eval?.(k) !== 'undefined';
  const _render       = has('render')       ? render       : null;
  const _updateWorld  = has('updateWorld')  ? updateWorld  : null;
  const _killEnemy    = has('killEnemy')    ? killEnemy    : null;
  const _Player       = has('Player')       ? Player       : null;
  const _shout        = has('shout')        ? shout        : null;

  if(!_render || !_updateWorld || !_killEnemy || !_Player){
    console.warn('[PolishPack] Couldn‚Äôt find hooks. Make sure this block sits ABOVE the IIFE‚Äôs closing "})();".');
    return;
  }

  // helpers
  const R = Math.random, TAU = Math.PI*2;
  const clamp = (v,min,max)=>Math.max(min,Math.min(max,v));

  // reuse your canvas/mouse/ctx if present
  const _canvas = typeof canvas!=='undefined' ? canvas : document.getElementById('game');
  const _ctx    = typeof ctx!=='undefined'    ? ctx    : _canvas.getContext('2d');
  const _mouse  = typeof mouse!=='undefined'  ? mouse  : {x:_canvas.width/2, y:_canvas.height/2};

  // --- Screen Shake + Hitstop / Time Scale ---
  let SHAKE_T = 0, SHAKE_POW = 0;
  let HITSTOP = 0;
  let TIME_SCALE = 1;
  function addShake(pow=6, dur=0.18){ SHAKE_POW = Math.max(SHAKE_POW, pow); SHAKE_T = Math.max(SHAKE_T, dur); }
  function addHitstop(sec=0.06){ HITSTOP = Math.max(HITSTOP, sec); }

  // --- Floating Text ---
  const floats = [];
  function floatText(x,y,txt,col='#e5e7eb'){ floats.push({x,y,txt,col,t:0}); }
  function drawFloats(c){
    for(let i=floats.length-1;i>=0;i--){
      const f=floats[i]; f.t+=1/60;
      const a = clamp(1 - f.t/0.9, 0, 1);
      const yy = f.y - f.t*38;
      c.save();
      c.globalAlpha = a;
      c.fillStyle = '#000'; c.font = '700 14px system-ui,Segoe UI,Roboto';
      c.textAlign='center'; c.textBaseline='middle';
      c.fillText(f.txt, f.x+1, yy+1);
      c.fillStyle = f.col;
      c.fillText(f.txt, f.x, yy);
      c.restore();
      if(a<=0) floats.splice(i,1);
    }
  }

  // --- Vignette kick when hurt ---
  let vignetteKick = 0;
  function kickVignette(a=0.5){ vignetteKick = Math.max(vignetteKick, a); }

  // wrap render
  render = function(){
    // camera shake
    if(SHAKE_T>0){
      const a = SHAKE_T/0.18;
      const mag = SHAKE_POW*a*a;
      _ctx.save();
      _ctx.translate((R()*2-1)*mag, (R()*2-1)*mag);
      _render();
      _ctx.restore();
      SHAKE_T -= 0.016;
      if(SHAKE_T<=0){ SHAKE_POW=0; }
    } else {
      _render();
    }

    // floating texts
    drawFloats(_ctx);

    // crosshair
    _ctx.save();
    _ctx.globalAlpha = 0.65;
    _ctx.translate(_mouse.x, _mouse.y);
    _ctx.beginPath(); _ctx.arc(0,0,10,0,TAU); _ctx.strokeStyle='#9dd1ff'; _ctx.lineWidth=1; _ctx.stroke();
    _ctx.beginPath(); _ctx.moveTo(-14,0); _ctx.lineTo(-4,0); _ctx.moveTo(4,0); _ctx.lineTo(14,0);
    _ctx.moveTo(0,-14); _ctx.lineTo(0,-4); _ctx.moveTo(0,4); _ctx.lineTo(0,14);
    _ctx.stroke();
    _ctx.restore();

    // hurt flash kicker
    if(vignetteKick>0){
      _ctx.fillStyle = `rgba(120,0,0,${0.25*vignetteKick})`;
      _ctx.fillRect(0,0,_canvas.clientWidth,_canvas.clientHeight);
      vignetteKick = Math.max(0, vignetteKick-0.03);
    }
  };

  // wrap updateWorld
  updateWorld = function(dt){
    if(HITSTOP>0){ HITSTOP -= dt; return; }
    _updateWorld(dt * TIME_SCALE);
  };

  // wrap killEnemy
  killEnemy = function(e){
    _killEnemy(e);
    addShake(7, 0.14);
    addHitstop(0.05);
    floatText(e.x, e.y-8, '+XP', '#60a5fa');
    if(Math.random()<0.65) floatText(e.x, e.y-24, '+Gold', '#f5d742');
  };

  // wrap Player.hurt
  const _hurt = _Player.prototype.hurt;
  _Player.prototype.hurt = function(d){
    floatText(this.x, this.y-18, `-${Math.ceil(d)}`, '#fca5a5');
    addShake(10, 0.2);
    kickVignette(0.6);
    _hurt.call(this, d);
  };

  // optional shout slow-mo
  if(_shout){
    shout = function(x,y,a){
      TIME_SCALE = 0.6; setTimeout(()=>{ TIME_SCALE = 1; }, 350);
      addShake(8, 0.18);
      _shout(x,y,a);
    };
  }

  // hold CapsLock for slow-mo
  addEventListener('keydown', e=>{ if((e.key||'').toLowerCase()==='capslock') TIME_SCALE = 0.5; });
  addEventListener('keyup',   e=>{ if((e.key||'').toLowerCase()==='capslock') TIME_SCALE = 1; });
})();


</script>
</body>
</html>
